
import os
import asyncio
import pandas as pd
import logging
from dotenv import load_dotenv
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- 1. –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_TOKEN or not GEMINI_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å TELEGRAM_TOKEN –∏ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini AI
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')


# --- 2. –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---

def load_inventory():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞ –≤ pandas DataFrame."""
    try:
        df = pd.read_csv('inventory.csv')
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return df
    except FileNotFoundError:
        logger.error("–§–∞–π–ª inventory.csv –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return pd.DataFrame() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
inventory_df = load_inventory()

def get_inventory_as_text():
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DataFrame –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ AI."""
    if inventory_df.empty:
        return "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DataFrame –≤ —Å—Ç—Ä–æ–∫—É, —É–±–∏—Ä–∞—è –∏–Ω–¥–µ–∫—Å
    return inventory_df.to_string(index=False)


# --- 3. –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---

def handle_simple_query(text: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –±–∞–∑–µ.
    –ò—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.
    """
    if inventory_df.empty:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞, –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    # `na=False` –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
    results = inventory_df[inventory_df['product_name'].str.contains(text, case=False, na=False)]

    if results.empty:
        return f"–¢–æ–≤–∞—Ä, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π '{text}', –Ω–µ –Ω–∞–π–¥–µ–Ω."

    response = []
    for _, row in results.iterrows():
        status = "–í –Ω–∞–ª–∏—á–∏–∏" if row['quantity'] > 0 else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        response.append(
            f"üîπ **{row['product_name']}**\n"
            f"   –°—Ç–∞—Ç—É—Å: {status}\n"
            f"   –û—Å—Ç–∞—Ç–æ–∫: {row['quantity']} —à—Ç.\n"
            f"   –¶–µ–Ω–∞: {row['price']} —Ä—É–±."
        )
    return "\n\n".join(response)


async def handle_ai_query(text: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini AI —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    if inventory_df.empty:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ –º–æ–≥—É –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å."

    inventory_context = get_inventory_as_text()

    # –≠—Ç–æ "–ø—Ä–æ–º–ø—Ç" - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    prompt = f"""
–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –Ω–∞ —Å–∫–ª–∞–¥–µ.
–ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ. –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏.
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ (quantity = 0), —Å–æ–æ–±—â–∏, —á—Ç–æ –µ–≥–æ —Å–µ–π—á–∞—Å –Ω–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–∞—Ç—É –ø–æ—Å—Ç–∞–≤–∫–∏.

–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –Ω–∞ —Å–∫–ª–∞–¥–µ:
---
{inventory_context}
---

–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: "{text}"

–¢–≤–æ–π –æ—Ç–≤–µ—Ç:
"""
    try:
        response = await model.generate_content_async(prompt)
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini AI: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


# --- 4. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    await update.message.reply_html(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.mention_html()}!\n\n"
        f"–Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –Ø –º–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ–≤–∞—Ä–æ–≤.\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `iPhone` –∏–ª–∏ `–∫–æ—Ñ–µ–º–∞—à–∏–Ω–∞`).\n\n"
        f"–î–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º, –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å `/ai`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/ai –µ—Å—Ç—å —É –≤–∞—Å –Ω–æ—É—Ç–±—É–∫–∏ –ø–æ–ª–µ–≥—á–µ?`"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_message = update.message.text

    if not user_message:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ AI-–∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
    if user_message.lower().startswith('/ai '):
        query = user_message[4:] # –£–±–∏—Ä–∞–µ–º "/ai "
        await update.message.reply_text("–î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º... ü§î", parse_mode='Markdown')
        response_text = await handle_ai_query(query)
    else:
        response_text = handle_simple_query(user_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(response_text, parse_mode='Markdown')


# --- 5. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–∫–∞ –≤—ã –µ–≥–æ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ)
    application.run_polling()

if __name__ == '__main__':
    main()
